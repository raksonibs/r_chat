{
  "name": "chai-webdriver",
  "version": "0.9.3",
  "description": "Build more expressive integration tests with some webdriver sugar for chai.js",
  "main": "lib/index.js",
  "scripts": {
    "build": "coffee --bare --compile --output lib/ src/",
    "pretest": "npm run-script build",
    "test": "mocha --compilers coffee:coffee-script/register spec/*.spec.coffee --reporter=spec",
    "prepublish": "npm run-script build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/goodeggs/chai-webdriver"
  },
  "keywords": [
    "chai",
    "webdriver",
    "integration-tests",
    "chai-plugin"
  ],
  "author": {
    "name": "Max Edmands"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/goodeggs/chai-webdriver/issues"
  },
  "dependencies": {
    "selenium-webdriver": ">=2.42.0",
    "string": "~1.8.0",
    "webdriver-sizzle": ">= 0.2.1"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "chai": "^1.9.0",
    "mocha": "~1.17.0",
    "phantomjs": "^1.9.7-1",
    "coffee-errors": "^0.8.6"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# chai-webdriver [![Build Status](https://travis-ci.org/goodeggs/chai-webdriver.png)](https://travis-ci.org/goodeggs/chai-webdriver) [![Dependency Status](https://david-dm.org/goodeggs/chai-webdriver.png)](https://david-dm.org/goodeggs/chai-webdriver) [![NPM version](https://badge.fury.io/js/chai-webdriver.png)](http://badge.fury.io/js/chai-webdriver)\n\nProvides [selenium-webdriver](https://npmjs.org/package/selenium-webdriver) sugar for the [Chai](http://chaijs.com/) assertion library. Allows you to create expressive integration tests:\n\n```javascript\nexpect('.frequency-field').dom.to.contain.text('One time')\nexpect('.toggle-pane').dom.to.not.be.visible()\n```\n\n## What sorts of assertions can we make?\n\nAll assertions start with a [Sizzle-compatible css selector](http://sizzlejs.com/), for example:\n\n- `expect('.list')`\n- `expect('div > h1')`\n- `expect('a[href=http://google.com]')`\n\nThen we add the dom flag, like so:\n\n- `expect(selector).dom`\n\nFinally, we can add our assertion to the chain.\n\n- `expect(selector).dom.to.have.text('string')` - Test the text value of the dom against supplied string. Exact matches only.\n- `expect(selector).dom.to.contain.text('string')` - Test the text value of the dom against supplied string. Partial matches allowed.\n- `expect(selector).dom.to.match(/regex/)` - Test the text value of the dom against the regular expression.\n- `expect(selector).dom.to.have.text(/regex/)` - Test the text value of the dom against the regular expression. (Same as `match` above).\n- `expect(selector).dom.to.be.visible()` - Check whether or not the element is being rendered\n- `expect(selector).dom.to.be.disabled()` - Check whether or not the form element is disabled\n- `expect(selector).dom.to.have.count(number)` - Test how many elements exist in the dom with the supplied selector\n- `expect(selector).dom.to.have.style('property', 'value')` - Test the CSS style of the element. Exact matches only, unfortunately, for now.\n- `expect(selector).dom.to.have.value('string')` - Test the value of a form field against supplied string.\n- `expect(selector).dom.to.have.htmlClass('warning')` - Tests that the element has `warning` as one of its class attributes.\n- `expect(selector).dom.to.have.attribute('attribute', 'value')` - Test an element's attribute value. Exact matches only. By omitting `value` test simply checks for existance of attribute.\n\nYou can also always add a `not` in there to negate the assertion:\n\n- `expect(selector).dom.not.to.have.style('property', 'value')`\n\n\n### Asynchronous flow\n\nNote that all these assertions are presumed to be *asynchronous* (using selenium-webdriver's promise chain).\nThey can all take callbacks, or be chained with promises. For example:\n\n- `expect(selector).dom.to.have.text('string', function(){...})`\n- `expect(selector).dom.to.have.text('string').then(function(){...})`\n\n\n## Setup\n\nSetup is pretty easy. Just:\n\n```javascript\n\n// Start with a webdriver instance:\nvar sw = require('selenium-webdriver');\nvar driver = new sw.Builder()\n  .withCapabilities(sw.Capabilities.chrome())\n  .build()\n\n// And then...\nvar chai = require('chai');\nvar chaiWebdriver = require('chai-webdriver');\nchai.use(chaiWebdriver(driver));\n\n// And you're good to go!\ndriver.get('http://github.com');\nchai.expect('#site-container h1.heading').dom.to.not.contain.text(\"I'm a kitty!\");\n```\n\n## Contributing\n\nso easy.\n\n```bash\nnpm install           # download the neccesary development dependencies\nnpm run-script build  # compile coffee-script into javascript\nnpm test              # build and run the specs\n```\n\n## License\n\nMIT.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/goodeggs/chai-webdriver",
  "_id": "chai-webdriver@0.9.3",
  "_from": "chai-webdriver@"
}
